TI III - Übung 2
Gruppe O
Dimitri Schachmann
Marcel Jünemann

1. Aufgabe
Die Idee der Protection Rings ist, Prozessen nur so viele Rechte zu geben,
wie sie zur Ausführung ihrer Aufgabe benötigen. Insbesondere sollen Prozesse
keinen direkten Zugriff auf Hardware und Speicherbereiche anderer Prozesse
haben. Windows und Linux benutzen nur Ring 0 für den Kernel und Ring 3 für
Programme im Userspace.
(Quelle: http://www.giac.org/resources/whitepaper/architecture/92.php)

2. Aufgabe
- Microkernel: Die Aussage stimmt zu 90%, Microkernel beschränken sich auf
  grundlegende Speicherverwaltung und Kommunikation zwischen Prozessen. Aller-
  dings ist der Begriff nicht standartisiert, sodass man ggf. auch einen Kernel,
  der noch etwas mehr Funktionen implementiert, noch als Microkernel bezeichnen
  könnte. Der Übergang zwischen Micro- und Hybridkernel ist fließend.
- Die Aussage ist falsch. Darauf muss der Kernel nur im Usermodus achten.
  Im Kernelmodus ist vollständiger Speicher- und Hardwarezugriff vorhanden.
-
- Die Aussage stimmt, bei einem Microkernel sind viele häufig genutzte
  Funktionen im Userspace implementiert. Da diese Funktionen i.d.R. Anfragen
  an den Kernel stellen, sind jedes Mal beim Aufruf dieser Funktionen
  zusätzliche Context Switches nötig.

3. Aufgabe
   (1) subroutine call into operating system
       Einfachste Möglichkeit, die bei simplen Betriebssystemen (z.B. MS-DOS)
       zum Einsatz kommt. Da dort jede Software mit voller Berechtigung läuft,
       muss nicht in einen anderen Mode gewechselt werden. Es wird schlicht 
       zu der Interrupt Routine gesprungen und am Ende wieder zurückgesprungen.

   (2) Machine-level instruction "system call"
       Hier wir bei einem systemcall ein Interrupt Ausgelöst, in dessen ISR,
       der entsprechende Code für den systemcall angesprungen wird. Compiler
       fügt die Parameter für den systemcall ein. Die Behandlung des Aufrufs
       erfolgt im Kernelmode. (die meisten UNIX Systeme)

   (3) Call of system module
       So wie bei (2) nur der Code für den Systemcall läuft im Mode des
       Aufrufers, also im Usermode.

   (4) Dispatching a task to a system process
.R. Anfragen
  an den Kernel stellen, sind jedes Mal beim Aufruf dieser Funktionen
  zusätzliche Context Switches nötig.

3. Aufgabe
   (1) subroutine call into operating system
       Einfachste Möglichkeit, die bei simplen Betriebssystemen (z.B. MS-DOS)
       zum Einsatz kommt. Da dort jede Software mit voller Berechtigung läuft,
       muss nicht in einen anderen Mode gewechselt werden. Es wird schlicht 
       zu der Interrupt Routine gesprungen und am Ende wieder zurückgesprungen.

   (2) Machine-level instruction "system call"
       Hier wir bei einem systemcall ein Interrupt Ausgelöst, in dessen ISR,
       der entsprechende Code für den systemcall angesprungen wird. Compiler
       fügt die Parameter für den systemcall ein. Die Behandlung des Aufrufs
       erfolgt im Kernelmode. (die meisten UNIX Systeme)

   (3) Call of system module
       So wie b